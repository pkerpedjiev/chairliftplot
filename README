1. Export area from OSM.
2. Compile osmfilter

cd scripts/
cc osmfilter.c -lz -o osmfilter

3. Filter out aerialways

name=austria-latest; ./scripts/osmfilter --keep="aerialway=" raw_osm/${name}.osm > filtered_osm/${name}.osm
name=switzerland-latest; ./scripts/osmfilter --keep="piste:type=downhill or aerialway="  raw_osm/${name}.osm > filtered_osm/${name}.osm
name=whistler; ./scripts/osmfilter --keep="piste:type=downhill or aerialway=" --drop="piste:grooming=backcountry"  raw_osm/${name}.osm > filtered_osm/${name}.osm

name=london; /usr/bin/time ./scripts/osmfilter raw_osm/${name}.osm --keep-ways=building= --drop-relations -o=filtered_osm/${name}.osm
name=london; /usr/bin/time ./scripts/osmfilter raw_osm/${name}.osm --keep="highway=" --drop="highway=track" --drop-relations -o=filtered_osm/highways/${name}.osm

4. Add elevation:

python scripts/augment_nodes.py filtered_osm/stuhleck.osm > with_elevation/stuhleck.osm

* Sample subset of nodes

name=vienna_small; python scripts/sample_osm_nodes.py -n 100 filtered_osm/${name}.osm > sampled_osm/${name}.ssv
name=europe-latest; python scripts/sample_osm_nodes.py -n 100 filtered_osm/highways/${name}.osm > sampled_osm/highways/${name}.ssv

* Cluster by distance:

name=austria-latest; python scripts/concave_hull.py sampled_osm/${name}.ssv -d 2 > jsons/${name}.json

* Convert to topojson

name=whistler; topojson -q 100000 -o jsons/${name}.topo boundaries=jsons/${name}.json; lt jsons/

Notes:

./scripts/finish.sh europe-latest
./scripts/finish.sh north-america-latest

## Combine Two Different Jsons ##

python scripts/combine_geojsons.py jsons/europe-latest.json jsons/north-america-latest.json > jsons/europe-north-america.json

## Get Top N Jsons ##

type=ski_lifts;
rm top_n/topo/${type}/all.topo
for name in europe-latest north-america-latest asia-latest south-america-latest australia-oceania-latest; do
    python scripts/filter_geojson.py jsons/${type}/${name}.json -t 5 > top_n/${type}/${name}.json 
done;
python scripts/combine_geojsons.py top_n/${type}/europe-latest.json top_n/${type}/north-america-latest.json top_n/${type}/asia-latest.json top_n/${type}/south-america-latest.json top_n/${type}/australia-oceania-latest.json > top_n/${type}/all.json
topojson -q 100000 -o top_n/topo/${type}/all.topo boundaries=top_n/${type}/all.json -p
cp top_n/topo/${type}/all.topo ~/projects/emptypipes/minisites/2015-11-07-map-area-comparison/jsons/topn.topo


./scripts/osmfilter --keep="piste:type=downhill or aerialway=" --drop="piste:grooming=backcountry"  raw_osm/${name}.osm > filtered_osm/${type}/${name}.osm

type=ski_lifts;
name=australia-oceania-latest;
distance=0.8;
python scripts/sample_osm_nodes.py -n 1 -d ${distance} filtered_osm/${type}/${name}.osm > sampled_osm/${type}/${name}.ssv
python scripts/concave_hull.py sampled_osm/${type}/${name}.ssv -d ${distance} > jsons/${type}/${name}.json
python scripts/filter_geojson.py jsons/${type}/${name}.json -t 1000 > jsons/${type}/${name}_topn.json
./scripts/finish.sh ${type}/${name}_topn

## Cities ##

name=central-america-latest; python scripts/filter_geojson.py jsons/highways/${name}.json -t 10 > jsons/highways/${name}_topn.json
./scripts/finish.sh highways/central-america-latest_topn

name=europe-latest;
/usr/bin/time ./scripts/osmfilter raw_osm/${name}.osm --keep="landuse=residential" --drop-relations -o=filtered_osm/residential/${name}.osm
python scripts/sample_osm_nodes.py -n 1 filtered_osm/residential/${name}.osm > sampled_osm/residential/${name}.ssv
python scripts/concave_hull.py sampled_osm/residential/${name}.ssv -d 0.5 > jsons/residential/${name}.json
python scripts/filter_geojson.py jsons/residential/${name}.json -t 1000 > jsons/residential/${name}_topn.json
./scripts/finish.sh residential/${name}_topn


## Setting up a pythonpath on archer ##

export PATH=~/.virtualenvs/stuff/bin/:$PATH
export PYTHONPATH=~/.virtualenvs/stuff/lib/python2.7/site-packages/
